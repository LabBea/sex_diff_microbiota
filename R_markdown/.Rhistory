clr_counts <- clr_counts %>%
dplyr::select(-SampleID)
write.csv(clr_counts, file = here("data/ML/model3_enzymes_covariates.csv"))
asvs <- read.csv(file = here("data/ML/ASVs_sex_p05.csv"), row.names = 1)
keggs <- read.csv(file = here("data/ML/model3_enzymes_covariates.csv"), row.names = 1)
asvs <- read.csv(file = here("data/ML/model2_asvs_covariates.csv"), row.names = 1)
keggs <- read.csv(file = here("data/ML/model3_enzymes_covariates.csv"), row.names = 1)
View(asvs)
View(keggs)
keggs <- keggs[,-c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence")]
keggs <- keggs[,!c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence")]
keggs <- keggs[,!(colnames(keggs) %in% c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence"))]
View(keggs)
keggs <- keggs[,!(colnames(keggs) %in% c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence", "Parity"))]
asvs <- read.csv(file = here("data/ML/model2_asvs_covariates.csv"), row.names = 1)
keggs <- read.csv(file = here("data/ML/model3_enzymes_covariates.csv"), row.names = 1)
keggs <- keggs[,!(colnames(keggs) %in% c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence", "Parity"))]
asvs$SampleID <- rownames(asvs)
keggs$SampleID <- rownames(keggs)
# Merge dataframes by "SampleID" and keep only one "sex" column
combined_df <- full_join(asvs, keggs, by = "SampleID") %>%
# dplyr::rename(sex = sex.y) %>%       # Rename "sex.x" back to "sex"
# dplyr::select(-sex.x) %>%
column_to_rownames(var = "SampleID")
# View the merged dataframe
head(combined_df)
write.csv(combined_df, file = here("data/ML/model4_combined.csv"))
asvs <- read.csv(file = here("data/ML/model2_asvs_covariates.csv"), row.names = 1)
keggs <- read.csv(file = here("data/ML/model3_enzymes_covariates.csv"), row.names = 1)
asvs <- asvs[,!(colnames(asvs) %in% c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence", "Parity"))]
asvs$SampleID <- rownames(asvs)
keggs$SampleID <- rownames(keggs)
# Merge dataframes by "SampleID" and keep only one "sex" column
combined_df <- full_join(asvs, keggs, by = "SampleID") %>%
# dplyr::rename(sex = sex.y) %>%       # Rename "sex.x" back to "sex"
# dplyr::select(-sex.x) %>%
column_to_rownames(var = "SampleID")
# View the merged dataframe
head(combined_df)
write.csv(combined_df, file = here("data/ML/model4_combined.csv"))
library(here)
library(tidyverse)
library(igraph)
library(NBZIMM)
library(lme4)
library(SpiecEasi)
library(LIMON)
library(ggeffects)
library(car)
library(phyloseq)
library(metagMisc)
library(ggplot2)
library(tidyr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
# load metadata
ps_ASVs <- readRDS(here("data/dada2/ps_ASVs.rds"))
metadata <- data.frame(ps_ASVs@sam_data) %>%
mutate(sex = as.factor(case_when(Infant_gender == 1 ~ 0,
Infant_gender == 2 ~ 1))) %>%
mutate(Residence = as.factor(case_when(Residency_status == 1 ~ 0,
Residency_status == 2 ~ 1))) %>%
# mutate(EGA = scale(Gestation_week)) %>%
dplyr::select(c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence", "Parity", "run_accession", "SampleID")) %>%
mutate(Time = 1)
rownames(metadata) <- metadata$SampleID
## FIX THIS!!!!!
#metadata_subset <- prune_samples((sample_names(ps.f)) %in% rownames(metadata), metadata)
#sample_data(ps_filtered) <- metadata
# load phyloseq object
ps.f <- readRDS(file = here("data/phyloseq/ps_healthy_css.rds"))
# Extract sample names from the phyloseq object
sample_ids <- sample_names(ps.f)
covariate_model <- metadata[metadata$run_accession %in% sample_ids,] %>%
dplyr::select(c("sex", "Gestation_week", "Age", "BMI_before_pregnancy", "Residence", "Parity")) %>%
mutate(Gestation_week = scale(Gestation_week)) %>%
mutate(Age = scale(Age)) %>%
mutate(BMI_before_pregnancy = scale(BMI_before_pregnancy)) %>%
mutate(Parity = scale(Parity))
# # Subset metadata based on matching row names to css_counts column names
# metadata_subset <- data.frame(sample_data(ps.f)) %>%
#   mutate(sex = case_when(Infant_gender == 2 ~ 1,
#                                    Infant_gender == 1 ~ 0))
#write.csv(covariate_model, file = here("data/ML/model1_covariates.csv"))
# load phyloseq object
ps.f <- readRDS(file = here("data/phyloseq/ps_healthy_css.rds"))
# Extract sample names from the phyloseq object
sample_ids <- sample_names(ps.f)
metadata_subset <- metadata[metadata$run_accession %in% sample_ids, ]
# # Subset metadata based on matching row names to css_counts column names
# metadata_subset <- data.frame(sample_data(ps.f)) %>%
#   mutate(sex = case_when(Infant_gender == 2 ~ 1,
#                                    Infant_gender == 1 ~ 0))
all_pvals <- read.csv(file = here("data/metagenomeseq/all_samples_sex_ega_interaction_pvalues.csv"), row.names = 1)
all_coefs <- read.csv(file = here("data/metagenomeseq/all_samples_sex_ega_interaction_foldchange.csv"), row.names = 1)
# calculate adjusted p-values using FDR
#########################################
adj_pvals <- as.data.frame(lapply(all_pvals, function(column) p.adjust(column, method = "fdr")))
row.names(adj_pvals) <- row.names(all_pvals)
# subset significant sex and sex*ega associated adj pvals
#########################################
sex_pvals <- adj_pvals %>%
filter(sex1 < 0.05)
# Subset the dataframe to keep only the "sex1" column and retain row names
sex_df <- sex_pvals[, "sex1", drop = FALSE] %>%
dplyr::rename(qval = sex1)
# subset all_coefs with sex_pvals
sex_coefs <- all_coefs[rownames(sex_pvals), "sex1", drop = FALSE] %>%
dplyr::rename(coef = sex1)
sex_df <- cbind(sex_coefs, sex_df)
# subset_taxa <- input_taxa[row.names(sex_df), , drop = FALSE]
#
# sex_df <- cbind(sex_df, subset_taxa)
# subset significant sex*ega associated adj pvals
#########################################
sex_ega_pvals <- adj_pvals %>%
filter(sex1.ega < 0.05)
# Subset the dataframe to keep only the "sex1" column and retain row names
sex_ega_df <- sex_ega_pvals[, "sex1.ega", drop = FALSE] %>%
dplyr::rename(qval = sex1.ega)
# subset all_coefs with sex_pvals
sex_ega_coefs <- all_coefs[rownames(sex_ega_pvals), "sex1.ega", drop = FALSE] %>%
dplyr::rename(coef = sex1.ega)
sex_ega_df <- cbind(sex_ega_coefs, sex_ega_df)
sig_sex_taxa <- rownames(rbind(sex_df, sex_ega_df))
# subset_taxa <- input_taxa[row.names(sex_ega_df), , drop = FALSE]
#
# sex_ega_df <- cbind(sex_ega_df, subset_taxa)
ps_ml <- prune_taxa(sig_sex_taxa, ps.f)
# Extract metadata and set new sample names from "SampleID" column
sample_data(ps_ml)$SampleID <- as.character(sample_data(ps_ml)$SampleID)  # Ensure SampleID is character
sample_names(ps_ml) <- sample_data(ps_ml)$SampleID
View(ps_ml)
ps_ml
## To keep dataset transformations consistent for enzymes and ASVs, we will subset the raw picrust data to include only features of interest and then clr transform that
# load KO file
picrust.kegg <- read.csv(file = here("data/picrust2/picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat.tsv"),
sep = "\t", row.names = 1)
all_maaslin <- read.csv(file = here("data/maaslin2/all_samples_kegg_sex_ega_interaction_clr_compositions_033125/all_results.tsv"), sep = "\t")
# sex_05 <- all_maaslin %>%
#   filter(pval < 0.05) %>%
#   filter(metadata %in% c("Infant_gender", "sex_ega"))
sex_05 <- all_maaslin %>%
filter(pval < 0.05) %>%
filter(metadata %in% "Infant_gender")
selected_kegg_ids <- sex_05$feature
css_filtered <- data.frame(t(picrust.kegg))
# Filter the phyloseq object to keep only the top taxa
css_filtered <- css_filtered[ ,selected_kegg_ids]
library(here)
library(phyloseq)
library(ggplot2)
library(tidyverse)
library(Biostrings)
library(vegan)
library(readxl)
library(metagenomeSeq)
library(compositions)
library(Maaslin2)
library(ggpubr)
library(quantreg)
library(readxl)
knitr::opts_chunk$set(echo = TRUE)
# # load pathways file
# picrust.pathways <- read.csv(file = here("data/picrust2/picrust2_out_pipeline/pathways_out/path_abun_unstrat.tsv"),
#                              sep = "\t", row.names = 1)
# load KO file
picrust.kegg <- read.csv(file = here("data/picrust2/picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat.tsv"),
sep = "\t", row.names = 1)
# # load mapfile - I think this has the enzymes that belong to each pathway
# picrust.mapfile <- read.csv(file = here("data/picrust2/picrust2_out_pipeline/intermediate/pathways/parsed_mapfile.tsv"),
#                             sep = " ", header = FALSE)
## Load phylseq object
ps.f <- readRDS(file = here("data/phyloseq/ps_healthy_filtered_010325.rds"))
input_meta <- data.frame(sample_data(ps.f)) %>%
mutate(Infant_gender = case_when(Infant_gender == 2 ~ 1,
Infant_gender == 1 ~ 0)) %>%
mutate(sex_ega = Infant_gender*Gestation_week)
rownames(input_meta) <- input_meta$SampleID
min_prevalence <- 0.90
min_abundance <- 0.90
unfiltered_data <- t(picrust.kegg)
unfiltered_metadata <- input_meta
# require at least total samples * min prevalence values
# for each feature to be greater than min abundance
total_samples <- nrow(unfiltered_data)
min_samples <- total_samples * min_prevalence
# Filter by abundance using zero as value for NAs
data_zeros <- unfiltered_data
data_zeros[is.na(data_zeros)] <- 0
filtered_data <-
data.frame(unfiltered_data[,
colSums(data_zeros > min_abundance) > min_samples,
drop = FALSE])
total_filtered_features <-
ncol(unfiltered_data) - ncol(filtered_data)
kegg_matrix <- as.matrix(t(filtered_data))
# # Replace zeros with a small pseudocount
pseudocount <- min(kegg_matrix[kegg_matrix > 0]) / 2
kegg_matrix[kegg_matrix == 0] <- pseudocount
#
# # CLR transform each KEGG pathway
clr_transformed <- t(apply(kegg_matrix, 1, compositions::clr))
#
# # Convert back to data frame (optional)
clr_transformed <- as.data.frame(clr_transformed)
write.csv(clr_transformed, file = here("data/maaslin2/clr_transformed_final.csv"))
## Fit data
fit_data <- Maaslin2(
input_data = clr_transformed,
input_metadata = input_meta,
min_abundance = 0,
min_prevalence = 0,
normalization = "NONE",
transform = "NONE",
standardize = FALSE,
analysis_method = "LM",
output = here("data/maaslin2/all_samples_kegg_sex_ega_interaction_clr_compositions_033125"),
fixed_effects = c("Infant_gender"
, "Age"
, "BMI_before_pregnancy"
, "Parity"
, "Residency_status"
, "Gestation_week"
, "sex_ega"
),
cores = 4
)
## Load phylseq object
ps.f <- readRDS(file = here("data/phyloseq/ps_healthy_filtered.rds"))
# load clr transformed picrust counts
filtered_clr <- read.csv(file = here("data/maaslin2/clr_transformed_final.csv"), row.names = 1)
# load maaslin2 results
all_maaslin <- read.csv(file = here("data/maaslin2/all_samples_kegg_sex_ega_interaction_clr_compositions_033125/significant_results.tsv"), sep = "\t")
input_meta <- data.frame(sample_data(ps.f)) %>%
mutate(Infant_gender = case_when(Infant_gender == 2 ~ 1,
Infant_gender == 1 ~ 0)) %>%
mutate(sex_ega = Infant_gender*Gestation_week)
rownames(input_meta) <- input_meta$SampleID
ps_kegg <- phyloseq(sample_data(input_meta),
otu_table(filtered_clr, taxa_are_rows = TRUE)
)
all_sig_sex <- all_maaslin %>%
filter(qval < 0.25) %>%
filter(metadata == "Infant_gender")
selected_kegg_ids <- all_sig_sex$feature
subset_counts <- picrust.kegg[rownames(picrust.kegg) %in% selected_kegg_ids, ]
# Transpose count data and convert to a long format
counts_long <- subset_counts %>%
rownames_to_column(var = "KEGG_ID") %>%
pivot_longer(cols = -KEGG_ID, names_to = "SampleID", values_to = "Count")
# Merge with metadata
data_merged <- merge(counts_long, input_meta, by = "SampleID")
# Plot using geom_smooth
ggplot(data_merged, aes(x = Gestation_week, y = Count, color = KEGG_ID, fill = KEGG_ID)) +
geom_smooth(method = "loess", span = 0.75, se = TRUE, alpha = 0.3) +
facet_wrap(~ KEGG_ID, scales = "free_y") +  # Create a plot for each KEGG ID
labs(title = "KEGG ID Trends Over Gestation Weeks - All Samples",
x = "Gestation Week",
y = "Relative Abundance (Counts)",
color = "KEGG ID",
fill = "KEGG ID") +
theme_minimal() +
theme(strip.text = element_text(face = "italic"))
# Subset the KEGG IDs
subset_counts <- filtered_clr[rownames(filtered_clr) %in% selected_kegg_ids, ]
# Transpose count data and convert to long format
counts_long <- subset_counts %>%
rownames_to_column(var = "KEGG_ID") %>%
pivot_longer(cols = -KEGG_ID, names_to = "SampleID", values_to = "Count")
# Merge with metadata
data_merged <- merge(counts_long, input_meta, by = "SampleID")
# Convert Infant_gender to a factor for proper legend labeling
data_merged$Infant_gender <- as.factor(data_merged$Infant_gender)
cols <- c("0" = "#50B93A", "1" = "#9C7FB9")
# Plot with separate smoothed lines for each Infant_gender
ggplot(data_merged, aes(x = Gestation_week, y = Count, color = Infant_gender, fill = Infant_gender)) +
geom_smooth(method = "loess", span = 0.75, se = TRUE, alpha = 0.3) +  # Separate smooth lines by gender
facet_wrap(~ KEGG_ID, scales = "free_y") +  # Create a plot for each KEGG ID
scale_color_manual(values = cols, labels = c("Male", "Female")) +  # Set colors for gender
scale_fill_manual(values = cols, guide = "none") +  # Remove fill legend
labs(title = "KEGG ID Trends Over Gestation Weeks - All Samples",
x = "Gestation Week",
y = "CLR Transformed Counts",
color = "Fetal Sex") +  # Keep only the color legend
theme_minimal() +
theme(strip.text = element_text(face = "italic"))
# load maaslin data
all_maaslin <- read.csv(file = here("data/maaslin2/all_samples_kegg_sex_ega_interaction_clr_compositions_033125/significant_results.tsv"), sep = "\t")
# female_maaslin <- read.csv(file = here("data/maaslin2/female_samples_ega_033125/significant_results.tsv"), sep = "\t")
# male_maaslin <- read.csv(file = here("data/maaslin2/female_samples_ega_033125/all_results.tsv"), sep = "\t")
# load kegg info
kegg_all_sex <- read.csv(file = here("data/maaslin2/kegg/kegg_info_df_sex_all_samples_033125.csv"), row.names = 1)
kegg_all_ega <- read.csv(file = here("data/maaslin2/kegg/kegg_info_df_ega_all_samples_033125.csv"), row.names = 1)
kegg_all_sex_ega <- read.csv(file = here("data/maaslin2/kegg/kegg_info_df_sex_ega_all_samples_033125.csv"), row.names = 1)
# kegg_female_ega <- read.csv(file = here("data/maaslin2/kegg/kegg_info_df_ega_female_samples.csv"), row.names = 1)
# rename entry column in kegg info df to feature
kegg_all_sex <- kegg_all_sex %>%
dplyr::rename(feature = ENTRY)
kegg_all_ega <- kegg_all_ega %>%
dplyr::rename(feature=ENTRY)
kegg_all_sex_ega <- kegg_all_sex_ega %>%
dplyr::rename(feature=ENTRY)
# kegg_female_ega <- kegg_female_ega %>%
#   dplyr::rename(feature=entry)
# filter by sex
maaslin.sex <- all_maaslin %>%
subset(metadata == "Infant_gender")
maaslin.sex <- merge(maaslin.sex, kegg_all_sex, by = "feature")
# write.csv(maaslin.sex, file = here("data/maaslin2/figure_dfs/sex_all_samples.csv"))
# maaslin.sex <- read.csv(file = here("data/maaslin2/figure_dfs/sex_all_samples.csv"))
maaslin.sex$SYMBOL <- factor(maaslin.sex$SYMBOL,
maaslin.sex$SYMBOL[order(maaslin.sex$qval)], ordered=T)
maaslin.sex$just <- ifelse(maaslin.sex$coef < 0,0,1)
# Order by fold change
maaslin.sex$SYMBOL = with(maaslin.sex, reorder(SYMBOL, coef, median))
cols <- c("0" = "#50B93A", "1" = "#9C7FB9")
ggplot(maaslin.sex, aes(x=SYMBOL, y=coef, fill=as.character(just))) +
geom_bar(stat="identity") +
scale_y_continuous("Fold change", limits = c(-.25, .25), position="left") +
scale_x_discrete("", labels = NULL) +
scale_fill_manual(values = cols, labels = NULL) +
# scale_fill_gradient2(low="#8C6BB1",mid = "#8C96C6", high="#E0ECF4", midpoint=mean(range(maaslin.sex$qval)),
#                       limits=range(maaslin.sex$qval), SYMBOL = "Adjusted p-value") +
coord_flip() +
theme_minimal()+
theme(legend.position = "none", axis.title = element_text(size = 20),
axis.text = element_text(size = 15)) +
geom_text(aes(x=SYMBOL, y=0, label=SYMBOL), hjust=maaslin.sex$just)
# filter by sex
maaslin.ega <- all_maaslin %>%
subset(metadata == "Gestation_week")
maaslin.ega <- merge(maaslin.ega, kegg_all_ega, by = "feature")
# write.csv(maaslin.sex, file = here("data/maaslin2/figure_dfs/ega_all_samples.csv"))
#maaslin.ega <- read.csv(file = here("data/maaslin2/figure_dfs/ega_all_samples.csv"))
maaslin.ega$SYMBOL <- factor(maaslin.ega$SYMBOL,
maaslin.ega$SYMBOL[order(maaslin.ega$qval)], ordered=T)
maaslin.ega$just <- ifelse(maaslin.ega$coef < 0,0,1)
# Order by fold change
maaslin.ega$SYMBOL = with(maaslin.ega, reorder(SYMBOL, coef, median))
cols <- c("0" = "#50B93A", "1" = "#9C7FB9")
ggplot(maaslin.ega, aes(x=SYMBOL, y=coef, fill=as.character(just))) +
geom_bar(stat="identity") +
scale_y_continuous("Fold change", limits = c(-.5, .2), position="left") +
scale_x_discrete("", labels = NULL) +
scale_fill_manual(values = cols, labels = NULL) +
# scale_fill_gradient2(low="#8C6BB1",mid = "#8C96C6", high="#E0ECF4", midpoint=mean(range(maaslin.ega$qval)),
#                       limits=range(maaslin.ega$qval), SYMBOL = "Adjusted p-value") +
coord_flip() +
theme_minimal()+
theme(legend.position = "none", axis.title = element_text(size = 20),
axis.text = element_text(size = 15)) +
geom_text(aes(x=SYMBOL, y=0, label=SYMBOL), hjust=maaslin.ega$just)
# filter by sex
maaslin.sex_ega <- all_maaslin %>%
subset(metadata == "sex_ega")
maaslin.sex_ega <- merge(maaslin.sex_ega, kegg_all_sex_ega, by = "feature")
# write.csv(maaslin.sex, file = here("data/maaslin2/figure_dfs/sex_ega_all_samples.csv"))
#maaslin.sex_ega <- read.csv(file = here("data/maaslin2/figure_dfs/sex_ega_all_samples.csv"))
maaslin.sex_ega$SYMBOL <- factor(maaslin.sex_ega$SYMBOL,
maaslin.sex_ega$SYMBOL[order(maaslin.sex_ega$qval)], ordered=T)
maaslin.sex_ega$just <- ifelse(maaslin.sex_ega$coef < 0,0,1)
# Order by fold change
maaslin.sex_ega$SYMBOL = with(maaslin.sex_ega, reorder(SYMBOL, coef, median))
cols <- c("0" = "#50B93A", "1" = "#9C7FB9")
ggplot(maaslin.sex_ega, aes(x=SYMBOL, y=coef, fill=as.character(just))) +
geom_bar(stat="identity") +
scale_y_continuous("Fold change", limits = c(-.5, .5), position="left") +
scale_x_discrete("", labels = NULL) +
scale_fill_manual(values = cols, labels = NULL) +
# scale_fill_gradient2(low="#8C6BB1",mid = "#8C96C6", high="#E0ECF4", midpoint=mean(range(maaslin.sex_ega$qval)),
#                       limits=range(maaslin.sex_ega$qval), SYMBOL = "Adjusted p-value") +
coord_flip() +
theme_minimal()+
theme(legend.position = "none", axis.title = element_text(size = 20),
axis.text = element_text(size = 15)) +
geom_text(aes(x=SYMBOL, y=0, label=SYMBOL), hjust=maaslin.sex_ega$just)
all_sig_sex_ega <- all_maaslin %>%
filter(qval < 0.25) %>%
filter(metadata == "sex_ega")
selected_kegg_ids <- all_sig_sex_ega$feature
# Subset the KEGG IDs
subset_counts <- filtered_clr[rownames(filtered_clr) %in% selected_kegg_ids, ]
# Transpose count data and convert to long format
counts_long <- subset_counts %>%
rownames_to_column(var = "KEGG_ID") %>%
pivot_longer(cols = -KEGG_ID, names_to = "SampleID", values_to = "Count")
# Merge with metadata
data_merged <- merge(counts_long, input_meta, by = "SampleID")
# Convert Infant_gender to a factor for proper legend labeling
data_merged$Infant_gender <- as.factor(data_merged$Infant_gender)
cols <- c("0" = "#50B93A", "1" = "#9C7FB9")
# Plot with separate smoothed lines for each Infant_gender
ggplot(data_merged, aes(x = Gestation_week, y = Count, color = Infant_gender, fill = Infant_gender)) +
geom_smooth(method = "loess", span = 0.75, se = TRUE, alpha = 0.3) +  # Separate smooth lines by gender
facet_wrap(~ KEGG_ID, scales = "free_y") +  # Create a plot for each KEGG ID
scale_color_manual(values = cols, labels = c("Male", "Female")) +  # Set colors for gender
scale_fill_manual(values = cols, guide = "none") +  # Remove fill legend
labs(title = "KEGG ID Trends Over Gestation Weeks - All Samples",
x = "Gestation Week",
y = "CLR Transformed Counts",
color = "Fetal Sex") +  # Keep only the color legend
theme_minimal() +
theme(strip.text = element_text(face = "italic"))
maaslin.sex$Source <- "Sex"
maaslin.ega$Source <- "EGA"
maaslin.sex_ega$Source <- "Sex + EGA"
maaslin_combined_df <- rbind(maaslin.sex, maaslin.ega, maaslin.sex_ega)
# based on plots above, K11635 is significant by both EGA & sex*EGA - looking at the line plot above, it looks like there's a bimodal distribution for female fetuses while it decreases as gestation progresses for male fetuses - therefore, we'll keep the interaction effect but remove the EGA only effect
maaslin_combined_df <- maaslin_combined_df %>%
dplyr::filter(!(metadata == "Gestation_week" & feature == "K11635"))
# Lollipop Plots for Differential Abundance
maaslin_combined_df %>%
arrange(metadata, coef) %>%
mutate(SYMBOL = factor(SYMBOL, levels = unique(SYMBOL))) %>%
#arrange(coef) %>%
#mutate(plotnames = factor(plotnames)) %>% # Set order
ggplot(aes(x = SYMBOL, y = coef)) +
geom_segment(aes(x = SYMBOL, xend = SYMBOL, y = 0, yend = coef), color = "gray") +
geom_point(aes(color = as.factor(Source)), size = 6) + # Map color to Time_Level
coord_flip() +
theme_bw() +
xlab("") +
ylab("Fold Change") +
ggtitle("") +
scale_color_manual(values = c("Sex" = "#FDB462", "EGA" = "#8DD3C7", "Sex + EGA" = "#BC80BD"),
name = "Feature")  +
theme(axis.text.x = element_text(color = "black", family = "Arial", size = 11),
axis.text.y = element_text(color = "black", family = "Arial", size = 11))
idx <- which(maaslin.ega$feature %in% maaslin.sex$feature)
maaslin.ega.filtered <- maaslin.ega[idx, ]
maaslin.sex$Source <- "Sex"
maaslin.ega.filtered$Source <- "EGA"
maaslin.sex_ega$Source <- "Sex + EGA"
maaslin_combined_df <- rbind(maaslin.sex, maaslin.ega.filtered, maaslin.sex_ega)
# Lollipop Plots for Differential Abundance
maaslin_combined_df %>%
arrange(metadata, coef) %>%
mutate(SYMBOL = factor(SYMBOL, levels = unique(SYMBOL))) %>%
#mutate(plotnames = factor(plotnames)) %>% # Set order
ggplot(aes(x = SYMBOL, y = coef)) +
geom_segment(aes(x = SYMBOL, xend = SYMBOL, y = 0, yend = coef), color = "gray") +
geom_point(aes(color = as.factor(Source)), size = 6) + # Map color to Time_Level
coord_flip() +
theme_bw() +
xlab("") +
ylab("Fold Change") +
ggtitle("") +
scale_color_manual(values = c("Sex" = "#FDB462",
"EGA" = "#8DD3C7",
"Sex + EGA" = "#BC80BD"),
name = "Feature")  +
theme(axis.text.x = element_text(color = "black", family = "Arial", size = 14),
axis.text.y = element_text(color = "black", family = "Arial", size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
axis.title = element_text(size = 14))
#ggsave(here("data/maaslin2/figures/figure4.jpeg"), plot = last_plot(), dpi = 1200, width = 12, height = 6, units = "in", limitsize = FALSE)
# Lollipop Plots for Differential Abundance
maaslin_combined_df %>%
arrange(metadata, coef) %>%
mutate(NAME = factor(NAME, levels = unique(NAME))) %>%
#mutate(plotnames = factor(plotnames)) %>% # Set order
ggplot(aes(x = NAME, y = coef)) +
geom_segment(aes(x = NAME, xend = NAME, y = 0, yend = coef), color = "gray") +
geom_point(aes(color = as.factor(Source)), size = 6) + # Map color to Time_Level
coord_flip() +
theme_bw() +
xlab("") +
ylab("Fold Change") +
ggtitle("") +
scale_color_manual(values = c("Sex" = "#FDB462",
"EGA" = "#8DD3C7",
"Sex + EGA" = "#BC80BD"),
name = "Feature")  +
theme(axis.text.x = element_text(color = "black", family = "Arial", size = 11),
axis.text.y = element_text(color = "black", family = "Arial", size = 11))
#ggsave(here("data/maaslin2/figures/figure4.jpeg"), plot = last_plot(), dpi = 1200, width = 12, height = 6, units = "in", limitsize = FALSE)
# Lollipop Plots for Differential Abundance
maaslin_combined_df %>%
arrange(metadata, coef) %>%
mutate(SYMBOL = factor(SYMBOL, levels = unique(SYMBOL))) %>%
#mutate(plotnames = factor(plotnames)) %>% # Set order
ggplot(aes(x = SYMBOL, y = coef)) +
geom_segment(aes(x = SYMBOL, xend = SYMBOL, y = 0, yend = coef), color = "gray") +
geom_point(aes(color = as.factor(Source)), size = 6) + # Map color to Time_Level
coord_flip() +
theme_bw() +
xlab("") +
ylab("Fold Change") +
ggtitle("") +
scale_color_manual(values = c("Sex" = "#FDB462",
"EGA" = "#8DD3C7",
"Sex + EGA" = "#BC80BD"),
name = "Feature")  +
theme(axis.text.x = element_text(color = "black", family = "Arial", size = 14),
axis.text.y = element_text(color = "black", family = "Arial", size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
axis.title = element_text(size = 14))
#ggsave(here("data/maaslin2/figures/figure4.jpeg"), plot = last_plot(), dpi = 1200, width = 12, height = 6, units = "in", limitsize = FALSE)
write.csv(maaslin_combined_df, file = here("data/maaslin2/figure_dfs/maaslin_combined_df.csv"))
write.csv(maaslin_combined_df, here("data/maaslin2/combined_df_all.csv"))
maaslin.sex$Source <- "Sex"
maaslin.ega$Source <- "EGA"
maaslin.sex_ega$Source <- "Sex + EGA"
maaslin_combined_df <- rbind(maaslin.sex, maaslin.ega, maaslin.sex_ega)
# based on plots above, K11635 is significant by both EGA & sex*EGA - looking at the line plot above, it looks like there's a bimodal distribution for female fetuses while it decreases as gestation progresses for male fetuses - therefore, we'll keep the interaction effect but remove the EGA only effect
maaslin_combined_df <- maaslin_combined_df %>%
dplyr::filter(!(metadata == "Gestation_week" & feature == "K11635"))
write.csv(maaslin_combined_df, here("data/maaslin2/combined_df_all.csv"))
ggsave(here("data/maaslin2/figures/figure4.jpeg"), plot = last_plot(), dpi = 1200, width = 12, height = 6, units = "in", limitsize = FALSE)
